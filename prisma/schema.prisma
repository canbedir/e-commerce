// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Product{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  price         Float
  brand         String
  category      String
  inStock       Boolean
  image         Image[]
  reviews       Review[]
}

model Image {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  url           String
  productId     String    @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id])
}

model Review{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId
  productId     String    @db.ObjectId
  rating        Int
  comment       String
  createdDate   DateTime  @default(now())

  product       Product   @relation(fields: [productId], references: [id])
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  hashedPassword String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  role Role @default(USER)

  accounts      Account[]
  reviews       Review[]
 
  @@map("users")
}

enum Role{
  USER
  ADMIN
}